2018年9月10日 15点10分 现场面
技术面：
自我介绍
Java 事务 spring如何处理事务
springboot启动过程
锁的理解
sql语句  having where
mybatis和jdbc的区别，连接过程
内存溢出是怎样造成的
HR面：
自我介绍
家庭情况
为什么不考研
优缺点
薪资问题

hashtable  与 hashMap的区别：
参考链接：https://blog.csdn.net/wangxing233/article/details/79452946

1、hashTable  不支持Null Key 也不支持 Null Value

2、HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。
当get()方法返回null值时，可能是 HashMap中没有该键，也可能使该键所对应的值为null。
因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。

3、线程安全性不同
Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。
在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步。
当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。（采用的分段锁，并不对整个数据进行锁定）

4、初始容量大小和每次扩充容量大小的不同
  Hashtable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。
  HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。
创建时，如果给定了容量初始值，那么Hashtable会直接使用你给定的大小，而HashMap会将其扩充为2的幂次方大小。
也就是说Hashtable会尽量使用素数、奇数。而HashMap则总是使用2的幂作为哈希表的大小。

线程池：
参考链接：https://www.cnblogs.com/dongguacai/p/6030187.html

1、


进程与线程的区别：

进程是资源分配的最小单位，线程是程序执行的最小单位。
进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、
    堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，
    因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。
线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，
    而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。
但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，
    而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。

线程之间的通信
进程之间的通信


TCP/UDP：以及三次握手，四次挥手
参考链接;https://www.cnblogs.com/xulibing/p/5932210.html








