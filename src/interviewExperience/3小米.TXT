小米电话二面：2018年9月17日 11点29分
自我介绍
自己介绍项目
有无offer
GC
对于多线程高并发的理解
线程间的通讯同步
反射的原理，应用场景（这个知识点需要着重了解一次）
提问（我是web开发，转向Android需要补充哪些知识：
    框架，底层，知识面要广
）

小米电话一面：2018年9月11日 10：00 ~ 11：00
岗位：软件开发工程师（手机部）
自述项目
Java数据类型 ，大小
hashCode与equals的区别
StringBuffer与StringBuilder（单线程）的简介（https://www.cnblogs.com/su-feng/p/6659064.html）
索引类型
数据库事务的特性（原子，数据一致，隔离，持久性）
JavaGC机制
TCp三次握手，为什么是三次（https://blog.csdn.net/whyliyu/article/details/51078276）
/*
总的来说，三次握手可以保证任何一次握手出现问题，都是可以被发现或补救的

     第一次握手A发送SYN传输失败，A,B都不会申请资源，连接失败。如果一段时间内发出多个SYN连接请求，那么A只会接受它最后发送的那个SYN的SYN+ACK回应，忽略其他回应全部回应，B中多申请的资源也会释放

     第二次握手B发送SYN+ACK传输失败，A不会申请资源，B申请了资源，但收不到A的ACK，过一段时间释放资源。如果是收到了多个A的SYN请求，B都会回复SYN+ACK，但A只会承认其中它最早发送的那个SYN的回应，并回复最后一次握手的ACK

     第三次握手ACK传输失败，B没有收到ACK，释放资源，对于后序的A的传输数据返回RST。实际上B会因为没有收到A的ACK会多次发送SYN+ACK，次数是可以设置的，如果最后还是没有收到A的ACK，则释放资源，对A的数据传输返回RST
*/


Http请求类型（post，get区别）提交数据用哪一个 为什么
链表，手写链表反转（没有判断存在环的情况）


***************************************************

2018年9月7日21点07分 准备
牛客网面经：

一、https://www.nowcoder.com/discuss/103858
垃圾收集器介绍
线程之间协作方式
自旋锁
死锁的成因和解决死锁的方法
linu相关：
    1、僵尸进程
    2、日志或者字符文件处理命令
数据结构与算法：希尔排序
计算机网络：
DNS解析
滑动窗口，拥塞控制几个阶段——慢开始->加性增->可能执行快重传->快恢复->加性增
手撸代码 链表排序nlog(n)、合并两个有序链表


二、
 手写快排
 树怎么在数据库里存的，怎么删除节点，递归了，手写，栈非递归。
 java8了解吗？说了点，熟悉stream吗？
 常用Linux命令，hashmap结构，手写求二叉树的高，volatile，手写多线程计数，synchronized，同步对象是谁？进程间通信，线程间通信，线程池。
 内部类

三、超全面博客
https://blog.csdn.net/sinat_35512245/article/details/58209966#commentBox


四、
链接：https://www.nowcoder.com/discuss/69225
来源：牛客网
java框架有哪些？
arraylist与linkedlist默认空间是多少
arraylist与linkedlist区别与各自的优势
常用的map有哪些 说三种
hashmap的实现原理
Stringbuilder与Stringbuffer的区别
String与stringbuffer和stringbuilder区别
wait与sleep谁占有资源
synchronize 与reentralock哪个是公平锁
怎么保证锁的高效
怎么让一个线程休息5秒后再恢复
怎么保证线程间的通信
你项目并发多少？怎么解决高并发问题
IO与NIO的区别
Springaop了解吗
SpringMvc常用注解
常用Linux命令
talent怎么用
怎么查看系统打印文档查看最后10页
和同事一起Git同一分支的代码怎么合并
nginx负载均衡的几种方法
你们项目前端用的什么框架？easyui
java 1/3=？js 1/3=？
js怎么获取对象
java与js强弱对象有什么区别
js弱对象怎么实现1+1=2?

五、
作者：obamaqueenie
链接：https://www.nowcoder.com/discuss/85009
来源：牛客网

1. 自我介绍
2. 看你最近博客写的是 redis，介绍 redis 和 mysql 的区别
3. Redis 的应用场景
4. Hashmap 的原理
5. Hashmap 中 jdk1.8 之后做了哪些优化
6. 垃圾回收的过程
7. Jvm 的参数设置
8. 项目中的优化














