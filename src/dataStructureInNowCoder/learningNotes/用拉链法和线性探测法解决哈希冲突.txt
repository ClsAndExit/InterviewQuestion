/**
*2018年8月25日
*参考网址：https://www.cnblogs.com/heyanan/p/6912870.html
*/
前言：
    常见的查找算法例如红黑树、二叉搜索树等查找插入时间复杂度最快也只能到O(logn)，使用散列表（Hash Table）可以使查找插入时间复杂度达到常数级别。
    散列表也称为哈希表，是字典的一种抽象。这种方法使查找插入时间复杂度降到常数级别。但是要牺牲一定的计算索引时间。计算索引的那个函数称为哈希函数（散列函数）。
哈希函数一般具有以下特点：1、相等的key产生相同的哈希值；2、计算简单方便；3、哈希值均匀分布（若过度集中则容易使效率降低到O(n)）。如果两个不同的key值算出了同一个索引，此时就需要用到一定的方法来解决哈希冲突。
    解决哈希冲突的方法：
    1、拉链法：Java标准库的HashMap基本上就是使用拉链法实现的。拉链法实现比较简单，将链表与数组结合。也就是说创建一个链表数组，数组中的每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。
        实现步骤：
            1、得到一个key；
            2、计算key的hashValue；
            3、根据hashValue值定位到data[hashValue].(data[hashValue]是一条链表)；
            4、若data[hashValue]为空，则直接插入；
            5、不然则添加到链表末尾（DK1.7及之前版本链表的插入采用头插法，而1.8改为尾插法）
        这里需要注意的是，哈希函数必须保证哈希值的均匀分布，若全部集中在一条链中，时间复杂度和链表相同。还有一点则是数组的大小，如果能估计数组的大小，则直接指定即可，否则就需要动态扩充数组。
    2、线性探测：直接使用数组来存储数据。可以想象成是停车问题。若当前车位已经有车，则继续向前开，直到找到下一个为空的车位。
        实现步骤：
            1、得到key；
            2、计算hashValue；
            3、若不冲突，则直接填入数组；
            4、若冲突，则使hashValue++，也就是向后查找，直到找到第一个data[hashValue]为空的情况，则填入。若到了尾部可循环到前面。
    3、性能比较：
    一般来说，使用散列表会比红黑树快很多。但具体还是要看哈希函数的计算效率。打死你hi散列表无法保障顺序，所以如果需要尽享有关顺序的操作，应该使用红黑树或者二叉搜索树。
    对于线性探测来说，动态调整数组大小是十分必要的，不然会产生死循环
    拉链法的删除操作比较方便，直接链表修改地址即可。而线性探测删除操作十分复杂，而且线性探测耗费的内存比拉链法要多（？？）























