第一套******
1、不包含任何结点的空树：是一棵树也是一棵二叉树

2、B 树相关

第二套******
1、哈希函数为什么取素数，跟计算机的输入有关。
  因为计算机输入不是所有数都是随机的，而是具有某种规律，因为存在大量的while   和for循环
  而素数对于这样的数处理起来比合数要好，而且素数一般去mod4余3的素数比较好

  参考资料：http://blog.csdn.net/wangchong_fly/article/details/47442265
  https://www.zhihu.com/question/20806796

2、线索二叉树中某节点R没有左孩子的充要条件是：R.ltag = 1;
  解释：LTag = 0 Lchild域指示结点的左孩子
        LTag = 1 Lchild域指示结点的前驱

        RTag = 0 Lchild域指示结点的右孩子
        RTag = 1 Lchild域指示结点的后继

第三套******
1、一个非空广义表：表头可以是原子或子表，表尾一定是子表

2、二叉树是一般树的特殊情况：错
    解释：树与二叉树是两种不同的树形结构，二叉树中的孩子节点是有严格的左右之分的

第四套*******
1、图的拓扑序列：画出网络的拓扑图，先从入度为0的顶点输出，然后删除此顶点，并删除以此顶点为尾的弧，继续重复此步骤（每次只能选取入度为0的顶点），直至输出所有顶点即可。

2、二叉树在线索化后,仍不能有效求解的问题是：后序线索二叉树中求后序后继
    解释：前序遍历和中序遍历的最后访问的结点都是叶子节点，
    叶子结点是没有子树的，所以两个指针域空了出来，可以存放线索指针。但是后序遍历中最后访问的是子树的根节点，子树根节点的两个指针域都指向子树了，不能空出来存放线索信息。

下午*******************
第五套*******
1、一棵树高为k的完全二叉树至少有()个结点
    答案：2^(k-1)
    解释：完全满二叉树为2^(k)-1 第K-1层为完全满二叉树，至少时，第K层只有一个结点

2、
    A、散列法存储的思想是由关键字和散列函数共同决定数据的存储位置的
    B、对于拉链法来说，数组的每一个节点指向一个链表，链表中的每一个节点都存储了散列值为索引的键值对，而链表的维护需要节点之间的指针进行维护
    C、负载因子是散列表的一个重要参数，它反映了散列表的饱和程度
    D、散列表的查找效率主要取决于散列函数、处理冲突的方法和装载因子

第六套******
1、若栈采用顺序存储方式存储，现两栈共享空间V[1..m]，
top[i]代表第i个栈( i =1,2)栈顶，栈1的底在v[1]，栈2的底在V[m]，则栈满的条件是（top[1]+1=top[2]）。
    解释：栈1向上增长，栈2向下增长，显然当top[1]和top[2]相邻时，栈满

2、数组就是矩阵，矩阵就是数组，这种说法错误
    解释：数组中的元素可以是很多种类型（例如字符、对象等等），而矩阵中的只能是数值类型的

3、处理hash冲突有：开放定址法（线性探测法、线性补偿探测法、随机探测法），拉链法，建立公共溢出区，再散列法

第七套******
1、设栈采用顺序结构存储，若已有i-1个元素入栈，则将第i个元素入栈时，入栈算法的时间复杂度为O(1)
    解释：相当于在数组最后插入一个（栈的大小事先设计好不再改变，如果是动态改变数组大小则另当别论）

2、设有关键字n=2^h-1,构成二叉排序树，每个关键字查找的概率相等，查找成功的ASL最大是n(错误)
    解释：什么是ASL？平均查找长度
    ASL =∑PiCi  （Pi 为查找第i个记录的概率，Ci为找到第i个记录数据需要比较的次数，Ci随查找过程的不同而不同。)
二分查找：
满二叉树时，若每个记录的查找概率相等时，Pi =1/n；ASL = 1/n（1*20+2*21+.....+n*2n-1）=log2（n+1）-1
要求查找成功的ASL最大，就是只有左子树或者只有右子树的情况，即顺序表以第一个数或最后一个数为根节点作二叉排序树。同样，若每个记录的查找概率相等时，Pi =1/n。∑PiCi =1/n∑(n-i+1)=(n+1)/2
所以是错的

3、哈希函数的选择与字段类型关系密切，哈希函数设计的好坏也影响着查找的速度

4、avl是平衡二叉排序树的缩写，B+树不一定是二叉。B+中的B是balanced(平衡的)首字母，与binary无关。

第八套******
1、常见的非线性数据结构：中各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。根据关系的不同，可分为层次结构和群结构。
                       二维数组、多维数组、广义表、树、图、堆
   常见的线性数据结构：线性表、栈、队列、双队列、数组、串

2、对于任意一个图，从它的某个结点进行一次深度或广度优先遍历可以访问到该图的每个顶点（连通图可以，非连通图不可以）

3、堆是一种完全二叉树。对于大顶堆而言，其每个节点的值都大于或等于其左右孩子节点的值；对于小顶堆，其每个节点的值都小于或等于其左右孩子节点的值。
    对序号为i的节点而言，其左右孩子分别为节点序号为2i和2i+1.
·
4、A：B树和B+树用于组织文件的动态索引结构
   B:B树和B+树都是平衡的多分枝树
   C:B树只适用于随即检索，不适用于顺序检索，而B+树适用于顺序检索和随即检索
解释：顺序检索就像是有序链表一样的检索，B+树的只有叶子节点存放关键字，且所有叶子节点依次连接，就像一个有序链表，因此可以顺序检索；

5、无向图G=(V,E),其中:V={a,b,c,d,e,f},E={(a,b),(a,e),(a,c),(b,e),(c,f),(f,d),(e,d)},对该图进行深度优先遍历,得到的顶点序列正确的是()
    答案：a,e,d,f,c,b
    解释：（无向图）所谓深度优先遍历是指从一个节点出发，一个走到其中邻居节点，将该邻居节点标记为已遍历，然后从该节点出发，重复上述步骤，知道遇到节点的出度为0或，节点的邻居都已遍历，再返回到最开始出发的节点，找到其未遍历的另一个邻居节点，重复上面的步骤即可。