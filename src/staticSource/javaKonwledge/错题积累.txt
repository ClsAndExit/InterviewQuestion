||***************************************||
||2018年5月23日16点01分					 ||
||***************************************||
Properties实现了Hash Table是线程安全的
StringBuffer是线程安全的

int i=Integer.parseInt(”123a”);将产生NumberFormatException
int a[]=null; a[0]=1; 将产生NullPointerException
输入输出流编程中，读和写时都要抛出IOException

public Method[] getDeclaredMethods()返回类或接口声明的所有方法，包括public, protected, default (package) 访问和private方法的Method对象，但不包括继承的方法。当然也包括它所实现接口的方法。
public Method[] getMethods()返回类的所有public方法，包括其继承类的公用方法，当然也包括它所实现接口的方法。

java不允许单独的过程或函数存在,java语言中的方法属于对象的成员,而不是类(是静态的)

flag = true ; flag == true;
JAVA的赋值运算是有返回值的，赋了什么值，就返回什么值
 
1.初始化父类中的静态成员变量和静态代码块 ； 
2.初始化子类中的静态成员变量和静态代码块 ； 
3.初始化父类的普通成员变量和代码块，再执行父类的构造方法；
4.初始化子类的普通成员变量和代码块，再执行子类的构造方法； 
 
Java的功能性注释：
功能性注释嵌在源程序中，用于说明程序段或语句的功能以及数据的状态。
可使用空行或缩进，以便很容易区分注释和程序。
修改程序也应修改注释。

jdk1.5以上自动拆装箱过程：
1、基本型和基本型封装型进行“==”运算符的比较，基本型封装型将会自动拆箱变为基本型后再进行比较，因此Integer(0)会自动拆箱为int类型再进行比较，显然返回true；
2、两个Integer类型进行“==”比较，如果其值在-128至127，那么返回true，否则返回false, 这跟Integer.valueOf()的缓冲对象有关，这里不进行赘述。
3、两个基本型的封装型进行equals()比较，首先equals()会比较类型，如果类型相同，则继续比较值，如果值也相同，返回true
4、基本型封装类型调用equals(),但是参数是基本类型，这时候，先会进行自动装箱，基本型转换为其封装类型，再进行3中的比较。

try-catch-finally 规则( 异常处理语句的语法规则 ）
1)  必须在 try 之后添加 catch 或 finally 块。try 块后可同时接 catch 和 finally 块，但至少有一个块。
2) 必须遵循块顺序：若代码同时使用 catch 和 finally 块，则必须将 catch 块放在 try 块之后。 
3) catch 块与相应的异常类的类型相关。 
4)一个try块可能有多个catch块。若如此，则执行第一个匹配块。即Java虚拟机会把实际抛出的异常对象依次和各个catch代码块声明的异常类型匹配，如果异常对象为某个异常类型或其子类的实例，就执行这个catch代码块，不会再执行其他的 catch代码块 
5) 可嵌套 try-catch-finally 结构。 
6) 在 try-catch-finally 结构中，可重新抛出异常。 
7) 除了下列情况，总将执行 finally 做为结束： JVM 过早终止（调用 System.exit(int)）；在 finally 块中抛出一个未处理的异常；计算机断电、失火、或遭遇病毒攻击
由此可以看出，catch只会匹配一个，因为只要匹配了一个，虚拟机就会使整个语句退出
 
 继承具有传递性
 
 instance是java的二元运算符，用来判断他左边的对象是否为右面类（接口，抽象类，父类）的实例
 instanceof用于判断前面的对象是否后面的类，或者其子类、实现类的实例。如果是，则返回true，否则返回false。  
 
A，CopyOnWriteArrayList适用于写少读多的并发场景
B，ReadWriteLock即为读写锁，他要求写与写之间互斥，读与写之间互斥，读与读之间可以并发执行。在读多写少的情况下可以提高效率
C，ConcurrentHashMap是同步的HashMap，读写都加锁
D，volatile只保证多线程操作的可见性，不保证原子性


Collection

    -----List

               -----LinkedList    非同步

                ----ArrayList      非同步，实现了可变大小的元素数组

                ----Vector          同步           

    -----Set   不允许有相同的元素

 Map

    -----HashTable        同步，实现一个key--value映射的哈希表，key和value都不允许出现null值

    -----HashMap          非同步，

    -----WeakHashMap   改进的HashMap，实现了“弱引用”，如果一个key不被引用，则被GC回收
注：
List接口中的对象按一定顺序排列，允许重复 
Set接口中的对象没有顺序，但是不允许重复 
Map接口中的对象是key、value的映射关系，key不允许重复
 
 
泛型仅仅是java的一颗语法糖，它不会影响java虚拟机生成的汇编代码，在编译阶段，虚拟机就会把泛型的类型擦除，还原成没有泛型的代码，顶多编译速度稍微慢一些，执行速度是完全没有什么区别的。

抽象类
特点:
1.抽象类中可以构造方法
2.抽象类中可以存在普通属性，方法，静态属性和方法。
3.抽象类中可以存在抽象方法。
4.如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法。
5.抽象类中的抽象方法，需要有子类实现，如果子类不实现，则子类也需要定义为抽象的。
接口
1.在接口中只有方法的声明，没有方法体。
2.在接口中只有常量，因为定义的变量，在编译的时候都会默认加上
public static final 
3.在接口中的方法，永远都被public来修饰。
4.接口中没有构造方法，也不能实例化接口的对象。
5.接口可以实现多继承
6.接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法
7.则实现类定义为抽象类。

静态成员函数中不能调用非静态成员
非静态成员函数中可以调用静态成员

||***************************************||
||2018年6月18日19点45分					 ||
||***************************************||
jdk8之后，接口可以定义 static方法 与 default方法。 static方法只能通过接口调用，不能通过实现类调用。default只能通过接口实现类调用，不能通过接口名调用。












 
 