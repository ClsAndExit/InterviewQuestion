第一套*******7分
1、I/O控制方式
    A、程序I/O控制方式：适用于结构简单，只需要少量硬件的电路；
    B、中断驱动I/O控制方式：适用于高效场合；
    C、直接存储访问DMA I/O控制方式：适用于无须CPU介入的控制器来控制内存与外设之间的数据交流的场合；
    D、I/O通道控制方式：适用于以字节为单位的干预，同时实现CPU、通道和I/O设备三者并行操作的场合

2、MS-DOS   系统中的磁盘文件物理结构属于链接文件

第二套*******5分
1、通常，用户编写的程序中所使用的地址是（逻辑地址）

2、PCB进程控制块在一般情况下包含以下内容：
    A、进程标识符（内部、外部）
    B、处理机的信息（通用寄存器、指令计数器、PSW、用户的栈指针）（处理器状态）
    C、进程调度信息（进程状态、进程的优先级、进程调度所需的其他信息、事件）
    D、进程控制信息（程序的数据的地址、资源清单、进程同步和通信机制、链接指针）

3、死锁预防策略：资源有序分配法
    解释：银行家算法是死锁避免算法。死锁避免和死锁预防是有区别的
    一般来讲，破坏死锁产生的四个必要条件的方法都属于死锁预防，资源有序分配法破坏了环路等待
    资源分配图简化法用来检测是否发生了死锁

4、执行完当前指令后，PC中存放的是后继指令的地址，因此PC的位数和（）的位数相同
    答案：主存地址寄存器
    解释：主存地址寄存器MAR和程序计数器PC的位数都取决于主存储器的容量，二者位数相等

5、Windows文件名中不能有下列符号：
    ?   \   /   :   "   <   >   |
    详细命名规则如下：
    A、允许文件或者文件夹名称不得超过255个字符
    B、文件名除了开头之外任何地方都可以使用空格
    C、Windows98文件名不区分大小写，但是在显示时可以保留大小写格式
    D、文件名中可以包含多个间隔符

6、互斥锁( mutexlock )：
  最常使用于线程同步的锁；标记用来保证在任一时刻，只能有一个线程访问该对象，同一线程多次加锁操作会造成死锁；临界区和互斥量都可用来实现此锁，通常情况下锁操作失败会将该线程睡眠等待锁释放时被唤醒
  自旋锁(spinlock)
  同样用来标记只能有一个线程访问该对象，在同一线程多次加锁操作会造成死锁；使用硬件提供的swap指令或test_and_set指令实现；同互斥锁不同的是在锁操作需要等待的时候并不是睡眠等待唤醒，而是循环检测保持者已经释放了锁，这样做的好处是节省了线程从睡眠状态到唤醒之间内核会产生的消耗，在加锁时间短暂的环境下这点会提高很大效率
  读写锁(rwlock)：
  高级别锁，区分读和写，符合条件时允许多个线程访问对象。处于读锁操作时可以允许其他线程和本线程的读锁， 但不允许写锁， 处于写锁时则任何锁操作都会睡眠等待；常见的操作系统会在写锁等待时屏蔽后续的读锁操作以防写锁被无限孤立而等待，在操作系统不支持情况下可以用引用计数加写优先等待来用互斥锁实现。 读写锁适用于大量读少量写的环境，但由于其特殊的逻辑使得其效率相对普通的互斥锁和自旋锁要慢一个数量级；值得注意的一点是按POSIX标准 在线程申请读锁并未释放前本线程申请写锁是成功的，但运行后的逻辑结果是无法预测
  递归锁(recursivelock)：
  严格上讲递归锁只是互斥锁的一个特例，同样只能有一个线程访问该对象，但允许同一个线程在未释放其拥有的锁时反复对该锁进行加锁操作； windows下的临界区默认是支持递归锁的，而linux下的互斥量则需要设置参数PTHREAD_MUTEX_RECURSIVE_NP，默认则是不支持
<----------------->
    进程/线程同步方法
    常见的进程/线程同步方法有互斥锁（或称互斥量Mutex）、读写锁（rdlock）、条件变量（cond）、信号量（Semophore）等。
    在windows系统中，临界区（Critical Section）和事件对象（Event）也是常用的同步方法。
    递归锁/非递归锁
    Mutex可以分为递归锁（recursive mutex）和非递归锁（non-recursive mutex）。 递归锁也叫可重入锁（reentrant mutex），非递归锁也叫不可重入锁（non-reentrant mutex）。
    二者唯一的区别是:
    同一个线程可以多次获取同一个递归锁，不会产生死锁。
    如果一个线程多次获取同一个非递归锁，则会产生死锁。
    Windows下的Mutex和Critical Section是可递归的。
    Linux下的pthread_mutex_t锁是默认是非递归的。可以通过设置PTHREAD_MUTEX_RECURSIVE属性，将pthread_mutex_t锁设置为递归锁。

7、在多道程序环境中,只有进程才能在系统中运行.因此为了使程序运行必须为其创建进程,而导致进程创建的事件典型有4种:
    A、用户登录。可以理解为一个新的用户来了，需要为他提供服务，这个服务之前没有，所以需要创建
    B、作业调度。系统会为调度的作业分配资源，从后备队列中将其放入内存中，并为其创建资源
    C、提供服务。系统为用户请求创建一个进程
    D、应用请求。用户程序自己创建进程





